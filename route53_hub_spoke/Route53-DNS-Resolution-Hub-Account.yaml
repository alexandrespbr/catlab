AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create the following
#1)Route53 Inbound and Outbound Resolver Endpoints
#2)Route53 Resolver rules for enabling On-Prem and local DNS name resolution

Parameters :
  MasterAccountId:
    Type: String
    Description: AWS account id of the Control Tower Master Account
    Default: 369931610880
  OrganizationID:
    Type: String
    Description: AWS organization (Org) ID or Organization Unit (OU) id where the Route53 Resolver Rules need to be shared
    Default: o-ohdgrwt3vj
  ParentDNSDomain:
    Type: String
    Description: Parent DNS Domain for all the child DNS domains to be used by Application Accounts on AWS.
    Default: aws.nowonline.com.br
  HubVpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id in the Networking Shared Service(Hub) Account to host the Service endpoints
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID of the shared services(Hub) VPC's 1st Private Subnet
  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID of the shared services(Hub) VPC's 2nd Private Subnet      
  Subnet1InboundIP:
    Type: String
    Description: Static IP address for Inbound Resolver in 1st Private Subnet
    Default: 10.192.20.245
  Subnet2InboundIP:
    Type: String
    Description: Static IP address for Inbound Resolver in 2nd Private Subnet
    Default: 10.192.21.245

Resources:

## Creating Security Groups for Route53 Resolvers

  SecurityGroupforRoute53Resolvers:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group for Route53 Resolvers
      SecurityGroupIngress: 
        - Description: Allowing UDP DNS Traffic
          IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - Description: Allowing TCP DNS Traffic
          IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: SecurityGroupforRoute53Resolvers
      VpcId: !Ref HubVpcId
        
  Route53OutboundEndpoint:
    Type: "AWS::Route53Resolver::ResolverEndpoint"
    Properties:
      Name: Route53OutboundEndpoint
      Direction: Outbound
      IpAddresses:
        - SubnetId: !Ref Subnet1
          #Ip: !Ref Subnet1OutboundIP
        - SubnetId: !Ref Subnet2
          #Ip: !Ref Subnet2OutboundIP
      SecurityGroupIds:
        - !GetAtt SecurityGroupforRoute53Resolvers.GroupId

## Creating Forwarding Rule for Application DNS Domains on AWS to be resolved by all accounts on AWS

  ChildDomainsResolverRule:
    Type: "AWS::Route53Resolver::ResolverRule"
    Properties:
      DomainName: !Ref ParentDNSDomain
      Name: InternalDNSResolution
      ResolverEndpointId: !GetAtt Route53OutboundEndpoint.ResolverEndpointId
      RuleType: FORWARD
      TargetIps:
        - Ip: !Ref Subnet1InboundIP
          Port: 53
        - Ip: !Ref Subnet2InboundIP
          Port: 53

## Attaching the Child Domains Resolver Rules with the VPC of the Hub Account

  Route53RuleAssociationChildDomains:
    Type: "AWS::Route53Resolver::ResolverRuleAssociation"
    Properties:
      Name: RuleAssociationforChildDomains
      ResolverRuleId: !GetAtt ChildDomainsResolverRule.ResolverRuleId
      VPCId: !Ref HubVpcId

## Sharing the Route53 Resolver Rules with Organization using RAM (Resource Access Manager)

  ResolverRuleShare:
    Type: "AWS::RAM::ResourceShare"
    Properties:
      Name: "Route53 Resolver Rules Organizational Share"
      ResourceArns:
        - !GetAtt ChildDomainsResolverRule.Arn
        #- !GetAtt OnPremDomainResolverRule.Arn
      Principals:
        - !Sub arn:aws:organizations::${MasterAccountId}:organization/${OrganizationID}

## Creating Route53 Inbound and Outbound Resolvers Endpoints

  Route53InboundEndpoint:
    Type: "AWS::Route53Resolver::ResolverEndpoint"
    DependsOn: Route53RuleAssociationChildDomains
    Properties:
      Name: Route53InboundEndpoint
      Direction: Inbound
      IpAddresses:
        - SubnetId: !Ref Subnet1
          Ip: !Ref Subnet1InboundIP
        - SubnetId: !Ref Subnet2
          Ip: !Ref Subnet2InboundIP
      SecurityGroupIds:
        - !GetAtt SecurityGroupforRoute53Resolvers.GroupId

## Automation to receive attachment requests from Child PHZs to the hub HubVpcId

  SNSAssociationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: PrivateHostedZoneAssociationTopic
      TopicName: PrivateHostedZoneAssociationTopic
  SNSAssociationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SNSAssociationTopic
      PolicyDocument:
        Statement:
          - Sid: AWSSNSPolicy
            Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref SNSAssociationTopic
            Principal:
              AWS: '*'
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrganizationID
  SNSAssociationSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt AssociationLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SNSAssociationTopic
  SNSAssociationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSAssociationTopic
      FunctionName: !GetAtt AssociationLambda.Arn
  AssociationLambdaRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Resource * acceptable for this policy."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: Route53PrivateZoneAssociation
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'route53:AssociateVPCWithHostedZone'
            Resource: !Sub 'arn:${AWS::Partition}:route53:::hostedzone/*'
      - PolicyName: DescribeVPCs
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:DescribeVpcs'
            Resource: '*'
  AssociationLambda: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile:
          !Sub |
          # Import statements
          import boto3
          import json
          from botocore.exceptions import ClientError
          # Start Lambda function
          def lambda_handler(event, context):
            print(f"Hosted Zone {event['Records'][0]['Sns']['Subject']}")
            associationData = json.loads(event['Records'][0]['Sns']['Message'])
            print('data received:', associationData)
            try:
              route53 = boto3.client('route53')
              response = route53.associate_vpc_with_hosted_zone(
                HostedZoneId=associationData['hostedZoneId'],
                VPC={
                  'VPCRegion': associationData['VPCRegion'],
                  'VPCId': associationData['VPCId']
                }
              )
              print(response)
              print("Respond: SUCCESS")
              return
            except ClientError as ex:
              print('Creating hosted zone association has failed.  See the following error.')
              print(ex.response['Error']['Message'])
              print("Respond: FAILED")
              return
      Handler: "index.lambda_handler"
      MemorySize: 128
      Role: !GetAtt "AssociationLambdaRole.Arn"
      Runtime: "python3.6"
      Timeout: 60

Outputs:
  # oChildDomainsResolverRuleID:
  #   Description: Rule ID of the Shared Route53 rule for All Child Domains in Landing Zone
  #   Value: !GetAtt "ChildDomainsResolverRule.ResolverRuleId"
  SNSAssociationTopicArn:
    Description: ARN of the SNSAssociationTopic
    Value: !Ref SNSAssociationTopic
  oOutBoundDNSResolverID:
    Description: ID of the Route53 Outbound DNS resolver Endpoint
    Value: !GetAtt Route53OutboundEndpoint.ResolverEndpointId
  oInboundResolverIP1:
    Description: First IP address of the Inbound Route53 Resolver endpoint
    Value: !Ref Subnet1InboundIP
  oInboundResolverIP2:
    Description: First IP address of the Inbound Route53 Resolver endpoint
    Value: !Ref Subnet2InboundIP