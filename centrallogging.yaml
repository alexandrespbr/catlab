AWSTemplateFormatVersion: 2010-09-09
Description: Template creates a Network Load Balancer in 2 AZs with EIPs listening on a TCP port 
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Networking Configuration
        Parameters:
          - VPC
          - CentralLoggingAccountPrivateSubnets
          - ElasticSearchDomainName
      - Label:
          default: Reverse Proxy Target Configurations
        Parameters:
          - ELBType
          - ELBIpAddressType
          - ReverseProxyInstanceType          
          - ReverseProxyKeyName
          - ReverseProxySSHLocation

Parameters:
  VPC:
    Type: 'AWS::EC2::VPC::Id'
  CentralLoggingAccountPrivateSubnets:
    Description: Provide Private Subnets associated. Select atleast one subnet in each AZ.
    Type: 'List<AWS::EC2::Subnet::Id>'  
  ELBType:
    Type: String
    Default: network
  ELBIpAddressType:
    Type: String
    AllowedValues:
      - ipv4
      - dualstack
    Default: ipv4
  ElasticSearchDomainName:
    Type: String
    Default: vpc-msp-elasticsearch-embratel-rgcltmzsumpoihdllf3sdptz6a.us-east-1.es.amazonaws.com

  ReverseProxyInstanceType:
   Description: Reverse Proxy EC2 instance type
   Type: String
   Default: t2.small
   AllowedValues:
    - t2.micro
    - t2.small
   ConstraintDescription: must be a valid EC2 instance type.
  ReverseProxyKeyName:
   Description: The EC2 Key Pair to allow SSH access to the reverse proxy instances
   Type: 'AWS::EC2::KeyPair::KeyName'
   ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ReverseProxySSHLocation:
   Description: The IP address range that can be used to SSH to the reverse proxy instances
   Type: String
   MinLength: '9'
   MaxLength: '18'
   Default: 10.192.0.0/16
   AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-04d29b6f966df1537

Resources:
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: !Ref CentralLoggingAccountPrivateSubnets
      Type: !Ref ELBType
      IpAddressType: !Ref ELBIpAddressType
  ReverseProxyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: TGNLBESInternal
      Port: 443
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      VpcId: !Ref VPC
  ReverseProxyTargetGroup2:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: TGNLBMSKInternal
      Port: 9094
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: ip
      Targets:
        - Id: 10.192.3.45
        - Id: 10.192.3.126
      VpcId: !Ref VPC
  ReverseProxyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: ReverseProxyTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ReverseProxyTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: '443'
      Protocol: TCP
  ReverseProxyListener2:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: ReverseProxyTargetGroup2
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ReverseProxyTargetGroup2
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: '9094'
      Protocol: TCP
  ReverseProxyASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref CentralLoggingAccountPrivateSubnets
      LaunchConfigurationName: !Ref ReverseProxyLaunchConfig
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs: 
        - !Ref ReverseProxyTargetGroup
  ReverseProxyLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName: !Ref ReverseProxyKeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref ReverseProxyInstanceType
          - Arch
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          amazon-linux-extras install nginx1.12 -y
          rm /etc/nginx/nginx.conf
          touch /etc/nginx/nginx.conf
          mkdir /etc/ssl/private
          chmod 700 /etc/ssl/private
          openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=WA/L=Seattle/O=AWS/CN=/" -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt
          cat << 'EOF' | tee /etc/nginx/nginx.conf
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log;
          pid /run/nginx.pid;
          include /usr/share/nginx/modules/*.conf;
          events {
            worker_connections 1024;
          }
          http {
              log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';
              access_log  /var/log/nginx/access.log  main;
              sendfile            on;
              tcp_nopush          on;
              tcp_nodelay         on;
              keepalive_timeout   65;
              types_hash_max_size 2048;
              include             /etc/nginx/mime.types;
              default_type        application/octet-stream;
              include /etc/nginx/conf.d/*.conf;
              server {
                  listen       443 ssl;
                  listen       [::]:443 ssl;
                  listen       80;
                  listen       [::]:80;
                  server_name  _;
                  ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
                  ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
                  root         /usr/share/nginx/html;
                  include /etc/nginx/default.d/*.conf;

                  location /_plugin/kibana/ {
                    proxy_pass https://${ElasticSearchDomainName}/_plugin/kibana/;
                    proxy_set_header X-Real-IP '$remote_addr';
                    proxy_set_header X-Forwarded-For '$proxy_add_x_forwarded_for';
                    proxy_set_header X-Forwarded-Proto '$scheme';
                    proxy_set_header X-Forwarded-Host '$host:443';
                    
                  }
                  error_page 404 /404.html;
                    location = /40x.html {
                  }
                  error_page 500 502 503 504 /50x.html;
                    location = /50x.html {
                  }
                }
            }
          EOF
          systemctl start nginx
      SecurityGroups:
        - !Ref ReverseProxyInstanceSecurityGroup
      InstanceType: !Ref ReverseProxyInstanceType    
  ReverseProxyInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref ReverseProxySSHLocation
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref ReverseProxySSHLocation
      VpcId: !Ref VPC

  EndpointService:
    Type: 'AWS::EC2::VPCEndpointService'
    Properties:
      NetworkLoadBalancerArns: 
        - !Ref NetworkLoadBalancer
      AcceptanceRequired: false
  
  EndpointPermissions:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties: 
      AllowedPrincipals: 
        - arn:aws:iam::119275499120:root
      ServiceId: !Ref EndpointService
Outputs:
  NLB:
    Description: ARN for the NLB
    Value: !Ref NetworkLoadBalancer
  ServiceEndpoint:
    Description: Endpoint service details
    Value: !Ref EndpointService
  ServiceEndpointName:
    Description: Endpoint service name
    Value: !Join
      - ''
      - - 'com.amazonaws.vpce.'
        - !Ref "AWS::Region"
        - '.'
        - !Ref 'EndpointService'