AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Deletes the following default networking components from AWS Accounts:
  1) Deletes the internet gateway
  2) Deletes the subnets
  4) Deletes the network access lists
  5) Deletes the security groups
  6) Deletes the default VPC
  {"framework": "servicecatalog-products", "role": "product", "product-set": "delete-default-vpc", "product": "delete-default-vpc", "version": "v1"}


Parameters:
  RegionsToDeleteFrom:
    Description: "Comma separated list of AWS Regions to delete the default VPC from"
    Type: String
  DeleteDefaultVPCLambdaExecutionIAMRoleName:
    Description: "Name of the IAM Role that will be created to execute the lambda function"
    Type: String
    Default: "DeleteDefaultVPCLambdaExecution"
  DeleteDefaultVPCLambdaExecutionIAMRolePath:
    Description: "The path for the IAM Role that will be created to execute the lambda function"
    Type: String
    Default: "/DeleteDefaultVPCLambdaExecution/"
  DeleteDefaultNetworkingLambdaFunctionName:
    Description: "The name to give the function that deletes the default networking resources"
    Type: String
    Default: "DeleteDefaultNetworking"

Resources:
  DefaultVpcDeletionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref DeleteDefaultVPCLambdaExecutionIAMRoleName
      Path: !Ref DeleteDefaultVPCLambdaExecutionIAMRolePath
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: Organizations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeInternetGateways"
                  - "ec2:DetachInternetGateway"
                  - "ec2:DeleteInternetGateway"
                  - "ec2:DescribeSubnets"
                  - "ec2:DeleteSubnet"
                  - "ec2:DescribeRouteTables"
                  - "ec2:DeleteRouteTable"
                  - "ec2:DescribeNetworkAcls"
                  - "ec2:DeleteNetworkAcl"
                  - "ec2:DeleteSecurityGroup"
                  - "ec2:DeleteVpc"
                  - "ec2:DescribeRegions"
                  - "ec2:DescribeAccountAttributes"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DeleteSecurityGroup"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'

  Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref DeleteDefaultNetworkingLambdaFunctionName
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 600
      Role: !GetAtt DefaultVpcDeletionRole.Arn
      Environment:
        Variables:
          REGIONS: !Ref RegionsToDeleteFrom
      Code:
        ZipFile: |
          import boto3, logging, traceback, os
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          logging.basicConfig(
            format='%(levelname)s %(threadName)s [%(filename)s:%(lineno)d] %(message)s',
            datefmt='%Y-%m-%d:%H:%M:%S',
            level=logging.INFO
          )

          def delete_igw(client, vpc_id):
            fltr = [{'Name' : 'attachment.vpc-id', 'Values' : [ vpc_id ]}]

            try:
              igw = client.describe_internet_gateways(Filters=fltr)['InternetGateways']

              if igw:
                igw_id = igw[0]['InternetGatewayId']
                client.detach_internet_gateway(InternetGatewayId=igw_id, VpcId=vpc_id)
                client.delete_internet_gateway(InternetGatewayId=igw_id)
              return

            except Exception as ex:
              logger.error(ex)
              traceback.print_tb(ex.__traceback__)
              raise

          def delete_subnets(client):
            try:
              subs = client.describe_subnets()['Subnets']

              if subs:
                for sub in subs:
                  sub_id = sub['SubnetId']
                  client.delete_subnet(SubnetId=sub_id)
              return

            except Exception as ex:
              logger.error(ex)
              traceback.print_tb(ex.__traceback__)
              raise

          def delete_rtbs(client):
            try:
              rtbs = client.describe_route_tables()['RouteTables']

              if rtbs:
                for rtb in rtbs:
                  main = False
                  for assoc in rtb['Associations']:
                    main = assoc['Main']
                  if main:
                    continue
                  rtb_id = rtb['RouteTableId']
                  client.delete_route_table(RouteTableId=rtb_id)
              return

            except Exception as ex:
              logger.error(ex)
              traceback.print_tb(ex.__traceback__)
              raise


          def delete_acls(client):
            try:
              acls = client.describe_network_acls()['NetworkAcls']

              if acls:
                for acl in acls:
                  default = acl['IsDefault']
                  if default:
                    continue
                  acl_id = acl['NetworkAclId']
                  client.delete_network_acl(NetworkAclId=acl_id)
              return

            except Exception as ex:
              logger.error(ex)
              traceback.print_tb(ex.__traceback__)
              raise


          def delete_sgps(client):

            try:
              sgps = client.describe_security_groups()['SecurityGroups']

              if sgps:
                for sgp in sgps:
                  default = sgp['GroupName']
                  if default == 'default':
                    continue
                  sg_id = sgp['GroupId']
                  client.delete_security_group(GroupId=sg_id)
              return

            except Exception as ex:
              logger.error(ex)
              traceback.print_tb(ex.__traceback__)
              raise


          def delete_vpc(client, vpc_id, region):
            try:
              client.delete_vpc(VpcId=vpc_id)
              logger.info('VPC {} has been deleted from the {} region.'.format(vpc_id, region))
              return

            except Exception as ex:
              logger.error(ex)
              traceback.print_tb(ex.__traceback__)
              raise

          def lambda_handler(e, c):
            regions = [r.strip() for r in os.getenv("REGIONS").split(",")]

            logger.info(f"regions {regions}")
            for region in regions:
              logger.info(f"starting {region}")
              ec2 = boto3.client('ec2', region_name=region)

              try:
                attribs = ec2.describe_account_attributes(AttributeNames=['default-vpc'])['AccountAttributes']
                vpc_id = attribs[0]['AttributeValues'][0]['AttributeValue']
                if vpc_id == 'none':
                  logger.info('Default VPC not found in {}'.format(region))
                  continue

                # Since most resources are attached an ENI, this checks for additional resources
                f = [{'Name' : 'vpc-id', 'Values' : [ vpc_id ]}]
                eni = ec2.describe_network_interfaces(Filters=f)['NetworkInterfaces']
                if eni:
                  logger.error('VPC {} has existing resources in the {} region.'.format(vpc_id, region))
                  continue

                delete_igw(ec2, vpc_id)
                delete_subnets(ec2)
                delete_rtbs(ec2)
                delete_acls(ec2)
                delete_sgps(ec2)
                delete_vpc(ec2, vpc_id, region)

              except Exception as ex:
                logger.error(ex)
                traceback.print_tb(ex.__traceback__)

            cfnresponse.send(e, c, cfnresponse.SUCCESS, {}, "")


  Execute:
    Type: Custom::Resource
    DeletionPolicy: Retain
    Properties:
      ServiceToken: !GetAtt Function.Arn
      RegionsToDeleteFrom: !Ref RegionsToDeleteFrom
      DeleteDefaultVPCLambdaExecutionIAMRoleName: !Ref DeleteDefaultVPCLambdaExecutionIAMRoleName
      DeleteDefaultVPCLambdaExecutionIAMRolePath: !Ref DeleteDefaultVPCLambdaExecutionIAMRolePath
      DeleteDefaultNetworkingLambdaFunctionName: !Ref DeleteDefaultNetworkingLambdaFunctionName
